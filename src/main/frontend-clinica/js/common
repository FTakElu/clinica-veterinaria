document.addEventListener('DOMContentLoaded', () => {
    // Exemplo de função para lidar com o botão de logout
    const logoutButton = document.getElementById('logout-button');
    if (logoutButton) {
        logoutButton.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('Usuário deslogado.');
            // Em uma aplicação real, você removeria o token de autenticação
            localStorage.removeItem('authToken');
            sessionStorage.removeItem('authToken');
            // Redirecionar para a página de login
            window.location.href = 'index.html';
        });
    }

    // Função de exemplo para ativar o link de navegação atual
    // Chame esta função no DOMContentLoaded de cada página
    function highlightActiveNav() {
        const navLinks = document.querySelectorAll('nav ul li a');
        const currentPath = window.location.pathname.split('/').pop(); // Obtém o nome do arquivo HTML

        navLinks.forEach(link => {
            if (link.getAttribute('href') === currentPath) {
                link.classList.add('active');
            } else {
                link.classList.remove('active');
            }
        });
    }
    highlightActiveNav(); // Chama a função ao carregar cada página

    // Funções placeholder para chamadas de API
    // Você precisará implementar a lógica de fetch() real aqui
    window.common = {
        loginUser: async (email, password) => {
            console.log('Simulando login para:', email);
            // Exemplo de fetch (substitua pelo seu endpoint real)
            // const response = await fetch('/api/auth/login', {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify({ email, password })
            // });
            // const data = await response.json();
            // if (response.ok) {
            //     localStorage.setItem('authToken', data.token); // Armazena o token
            //     return data;
            // } else {
            //     throw new Error(data.message || 'Falha no login');
            // }
            return { success: true, token: 'fake_token', user: { role: 'CLIENTE', name: 'João' } }; // Simulação
        },

        registerUser: async (email, password, role) => {
            console.log('Simulando registro para:', email, 'com função:', role);
            // Exemplo de fetch (substitua pelo seu endpoint real)
            // const response = await fetch('/api/auth/register', {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify({ email, password, role })
            // });
            // const data = await response.json();
            // if (response.ok) {
            //     return data;
            // } else {
            //     throw new Error(data.message || 'Falha no registro');
            // }
            return { success: true }; // Simulação
        },

        // Exemplo: Função para fazer requisições autenticadas
        fetchAuthenticated: async (url, options = {}) => {
            const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
            const headers = {
                'Content-Type': 'application/json',
                ...options.headers
            };
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            }
            const response = await fetch(url, { ...options, headers });
            if (!response.ok) {
                if (response.status === 401 || response.status === 403) {
                    alert('Sessão expirada ou acesso negado. Faça login novamente.');
                    localStorage.removeItem('authToken');
                    sessionStorage.removeItem('authToken');
                    window.location.href = 'index.html'; // Redireciona para o login
                }
                throw new Error(`Erro na requisição: ${response.statusText}`);
            }
            return response.json();
        },

        // Adicione outras funções comuns aqui, como:
        // getAppointmentsForClient: async () => common.fetchAuthenticated('/api/client/appointments'),
        // getPetsForClient: async () => common.fetchAuthenticated('/api/client/pets'),
        // getDashboardStats: async () => common.fetchAuthenticated('/api/secretary/dashboard-stats'),
        // getVetDashboardStats: async () => common.fetchAuthenticated('/api/vet/dashboard-stats'),
        // registerPet: async (petData) => common.fetchAuthenticated('/api/client/pets', { method: 'POST', body: JSON.stringify(petData) }),
        // ... e assim por diante para todas as suas APIs
    };
});